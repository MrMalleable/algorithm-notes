{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6b22\u8fce\u8e29\u8e29\uff01 For full documentation visit mkdocs.org . Mkdocs\u5e38\u7528\u547d\u4ee4\u5982\u4e0b\uff1a mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"\u9996\u9875"},{"location":"#_1","text":"For full documentation visit mkdocs.org .","title":"\u6b22\u8fce\u8e29\u8e29\uff01"},{"location":"#mkdocs","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Mkdocs\u5e38\u7528\u547d\u4ee4\u5982\u4e0b\uff1a"},{"location":"about/","text":"\u6211\u53ea\u662f\u4e00\u4e2a\u5c0f\u83dc\u9e21\u3002 \u4f46\u8981\u8bb0\u5f97\u6211\u7684\u540d\u5b57\u662f\u83dc\u725b\u51b2\u9e2d\uff01","title":"\u5173\u4e8e\u6211"},{"location":"about/#_1","text":"","title":"\u6211\u53ea\u662f\u4e00\u4e2a\u5c0f\u83dc\u9e21\u3002"},{"location":"about/#_2","text":"","title":"\u4f46\u8981\u8bb0\u5f97\u6211\u7684\u540d\u5b57\u662f\u83dc\u725b\u51b2\u9e2d\uff01"},{"location":"graph/","text":"\u90bb\u63a5\u77e9\u9635 import java.util.*; class Graph{ static void addEdge(ArrayList<ArrayList<Integer>> adj, int u, int v){ adj.get(u).add(v); adj.get(v).add(u); } /** * \u4ece\u6bcf\u4e2a\u8282\u70b9\u5f00\u59cb\uff0c\u6253\u5370\u8be5\u8282\u70b9\u76f8\u90bb\u7684\u70b9 */ static void printGraph(ArrayList<ArrayList<Integer>> adj){ for (int i = 0; i < adj.size(); i++) { System.out.println(\"\\nAdjacency list of vertex\" + i); System.out.print(\"head\"); for (int j = 0; j < adj.get(i).size(); j++) { System.out.print(\" -> \" + adj.get(i).get(j)); } System.out.println(); } } public static void main(String[] args) { int V = 5; ArrayList<ArrayList<Integer> > adj = new ArrayList<ArrayList<Integer> >(V); for (int i = 0; i < V; i++) adj.add(new ArrayList<Integer>()); addEdge(adj, 0, 1); addEdge(adj, 0, 4); addEdge(adj, 1, 2); addEdge(adj, 1, 3); addEdge(adj, 1, 4); addEdge(adj, 2, 3); addEdge(adj, 3, 4); printGraph(adj); } } BFS\u7b97\u6cd5 \u9700\u8981\u501f\u52a9\u4e00\u4e2avisited\u6570\u7ec4\u6765\u4fdd\u8bc1\u9047\u5230\u73af\u7684\u65f6\u5019\u4e0d\u4f1a\u65e0\u9650\u904d\u5386\u4e0b\u53bb\u3002 import java.io.*; import java.util.*; class Graph{ private int V; private LinkedList<Integer> adj[]; Graph(int v){ V = v; adj = new LinkedList[v]; for(int i = 0; i < v; i++){ adj[i] = new LinkedList<>(); } } /* * * \u4e00\u6761\u8fb9 \u4ecev\u5230w */ void addEdge(int v, int w){ adj[v].add(w); } // \u4ece\u70b9s\u5f00\u59cb\u904d\u5386\u6574\u4e2a\u56fe vpid BFS(int s){ boolean visited[] = new boolean[V]; LinkedList<Integer> queue = new LinkedList<Integer>(); visited[s] = true; queue.add(s); while(!queue.isEmpty()){ s = queue.poll(); System.out.println(s + \" \"); Iterator<Integer> i = adj[s].listIterator(); while(i.hasNext()){ int n = i.next(); if(!visited[n]){ visited[n] = true; queue.add(n); } } } } public static void main(String args[]){ Grapg g = new Graph(4); g.addEdge(0,1); g.addEdge(0,2); g.addEdge(1,2); g.addEdge(2,0); g.addEdge(2,3); g.addEdge(3,3); System.out.println(\"Following is Breadth First Traversal \"+ \"(starting from vertex 2)\"); g.BFS(2); } // Following is Breadth First Traversal (starting from vertex 2) // 2 0 3 1 } DFS\u7b97\u6cd5 \u4e3b\u8981\u7b97\u6cd5\uff1a 1. \u6807\u8bb0\u5f53\u524d\u8282\u70b9\u4e3a\u8bbf\u95ee\u8fc7\u540e\u6253\u5370\u5f53\u524d\u8282\u70b9 2. \u904d\u5386\u6240\u6709\u7684\u90bb\u63a5\u8282\u70b9\uff0c\u5982\u679c\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\uff0c\u5219\u9012\u5f52\u904d\u5386\u3002 import java.io.*; import java.util.*; class Graph { private int v; private LinkedList<Integer> adj[]; Graph(int v){ V = v; adj = new LinkedList[v]; for(int i = 0; i < v; i++){ adj[i] = new LinkedList<>(); } } void addEdge(int v, int w){ adj[v].add(w); } void DFSUtil(int v, boolean visited[]){ visited[v] = true; System.out.println(v + \" \"); Iterator<Integer> i = adj[v].listIterator(); while(i.hasNext()){ int n = i.next(); if(!visited[n]){ DFSUtil(n, visited); } } } void DFS(int v){ boolean visited[] = new boolean[V]; DFSUtil(v, visited); } public static void main(String args[]){ Graph g = new Graph(4); g.addEdge(0, 1); g.addEdge(0, 2); g.addEdge(1, 2); g.addEdge(2, 0); g.addEdge(2, 3); g.addEdge(3, 3); System.out.println( \"Following is Depth First Traversal \" + \"(starting from vertex 2)\"); g.DFS(2); // Following is Depth First Traversal (starting from vertex 2) // 2 0 1 3 } } DFS\u5e94\u7528 \u68c0\u6d4b\u56fe\u4e2d\u7684\u73af \u5bfb\u627e\u8def\u5f84 \u62d3\u6251\u6392\u5e8f \u68c0\u6d4b\u56fe\u662f\u4e0d\u662f\u4e00\u4e2a\u4e8c\u5206\u56fe\uff08\u8fde\u901a\u6027\uff09 \u627e\u5230\u56fe\u7684\u5f3a\u8fde\u901a\u5206\u91cf \u8ff7\u5bab\u7c7b\u9898\u76ee BFS\u5e94\u7528 \u975e\u52a0\u6743\u56fe\u7684\u6700\u77ed\u8def\u5f84\u4e0e\u6700\u5c0f\u751f\u6210\u6811 \u5bf9\u7b49\u7f51\u7edc \u641c\u7d22\u5f15\u64ce\u4e2d\u7684\u722c\u866b \u793e\u4ea4\u7f51\u7ad9 GPS\u5bfc\u822a\u7cfb\u7edf \u7f51\u7edc\u4e2d\u7684\u5e7f\u64ad \u5783\u573e\u56de\u6536 \u68c0\u6d4b\u65e0\u5411\u56fe\u4e2d\u7684\u73af Ford-Fulkerson\u7b97\u6cd5\uff08\u6700\u5927\u6d41\u91cf\u7b97\u6cd5\uff09 \u68c0\u6d4b\u56fe\u662f\u4e0d\u662f\u4e00\u4e2a\u4e8c\u5206\u56fe \u5bfb\u627e\u8def\u5f84 \u5bfb\u627e\u4e00\u4e2a\u8282\u70b9\u8fde\u901a\u7684\u6240\u6709\u8282\u70b9 \u7528set\u548chash\u6765\u8868\u793a\u56fe \u6bcf\u4e2a\u70b9\u8fde\u63a5\u7684\u8282\u70b9\u90fd\u7528\u4e00\u4e2aset\u6765\u8fdb\u884c\u4fdd\u5b58\uff0c\u5e76\u4e14\u662f\u4ece\u5c0f\u5230\u8fbe\u6392\u5217\u7684\u3002 import java.util.*; class Graph{ HashMap<Integer, TreeSet<Integer>> graph; static int v; public Graph(){ graph = new HashMap<>(); for(int i = 0; i < v; i++){ graph.put(i, new TreeSet<>()); } } public void addEdge(int src, int dest){ graph.get(src).add(dest); graph.get(dest).add(src); } public void printGraph(){ for(int i = 0 ; i < v; i++){ System.out.println(\"Adjacency list of vertex \"+ i); Iterator set = graph.get(i).iterator(); while(set.hasNext()){ System.out.println(set.next() + \" \"); } System.out.println(\"\\n\"); } } public void searchEdge(int src, int dest){ Iterator set = graph.get(src).iterator(); if (graph.get(src).contains(dest)) System.out.println(\"Edge from \" + src + \" to \" + dest + \" found\"); else System.out.println(\"Edge from \" + src + \" to \" + dest + \" not found\"); System.out.println(); } public static void main(String[] args){ v = 5; Graph graph = new Graph(); graph.addEdge(0, 1); graph.addEdge(0, 4); graph.addEdge(1, 2); graph.addEdge(1, 3); graph.addEdge(1, 4); graph.addEdge(2, 3); graph.addEdge(3, 4); graph.printGraph(); graph.searchEdge(2,1); graph.searchEdge(0,3); } //Adjacency list of vertex 0 //4 1 //Adjacency list of vertex 1 //4 3 2 0 //Adjacency list of vertex 2 //3 1 //Adjacency list of vertex 3 //4 2 1 //Adjacency list of vertex 4 //3 1 0 //Edge from 2 to 1 found. //Edge from 0 to 3 not found. }","title":"\u56fe\u8bba"},{"location":"graph/#_1","text":"import java.util.*; class Graph{ static void addEdge(ArrayList<ArrayList<Integer>> adj, int u, int v){ adj.get(u).add(v); adj.get(v).add(u); } /** * \u4ece\u6bcf\u4e2a\u8282\u70b9\u5f00\u59cb\uff0c\u6253\u5370\u8be5\u8282\u70b9\u76f8\u90bb\u7684\u70b9 */ static void printGraph(ArrayList<ArrayList<Integer>> adj){ for (int i = 0; i < adj.size(); i++) { System.out.println(\"\\nAdjacency list of vertex\" + i); System.out.print(\"head\"); for (int j = 0; j < adj.get(i).size(); j++) { System.out.print(\" -> \" + adj.get(i).get(j)); } System.out.println(); } } public static void main(String[] args) { int V = 5; ArrayList<ArrayList<Integer> > adj = new ArrayList<ArrayList<Integer> >(V); for (int i = 0; i < V; i++) adj.add(new ArrayList<Integer>()); addEdge(adj, 0, 1); addEdge(adj, 0, 4); addEdge(adj, 1, 2); addEdge(adj, 1, 3); addEdge(adj, 1, 4); addEdge(adj, 2, 3); addEdge(adj, 3, 4); printGraph(adj); } }","title":"\u90bb\u63a5\u77e9\u9635"},{"location":"graph/#bfs","text":"\u9700\u8981\u501f\u52a9\u4e00\u4e2avisited\u6570\u7ec4\u6765\u4fdd\u8bc1\u9047\u5230\u73af\u7684\u65f6\u5019\u4e0d\u4f1a\u65e0\u9650\u904d\u5386\u4e0b\u53bb\u3002 import java.io.*; import java.util.*; class Graph{ private int V; private LinkedList<Integer> adj[]; Graph(int v){ V = v; adj = new LinkedList[v]; for(int i = 0; i < v; i++){ adj[i] = new LinkedList<>(); } } /* * * \u4e00\u6761\u8fb9 \u4ecev\u5230w */ void addEdge(int v, int w){ adj[v].add(w); } // \u4ece\u70b9s\u5f00\u59cb\u904d\u5386\u6574\u4e2a\u56fe vpid BFS(int s){ boolean visited[] = new boolean[V]; LinkedList<Integer> queue = new LinkedList<Integer>(); visited[s] = true; queue.add(s); while(!queue.isEmpty()){ s = queue.poll(); System.out.println(s + \" \"); Iterator<Integer> i = adj[s].listIterator(); while(i.hasNext()){ int n = i.next(); if(!visited[n]){ visited[n] = true; queue.add(n); } } } } public static void main(String args[]){ Grapg g = new Graph(4); g.addEdge(0,1); g.addEdge(0,2); g.addEdge(1,2); g.addEdge(2,0); g.addEdge(2,3); g.addEdge(3,3); System.out.println(\"Following is Breadth First Traversal \"+ \"(starting from vertex 2)\"); g.BFS(2); } // Following is Breadth First Traversal (starting from vertex 2) // 2 0 3 1 }","title":"BFS\u7b97\u6cd5"},{"location":"graph/#dfs","text":"\u4e3b\u8981\u7b97\u6cd5\uff1a 1. \u6807\u8bb0\u5f53\u524d\u8282\u70b9\u4e3a\u8bbf\u95ee\u8fc7\u540e\u6253\u5370\u5f53\u524d\u8282\u70b9 2. \u904d\u5386\u6240\u6709\u7684\u90bb\u63a5\u8282\u70b9\uff0c\u5982\u679c\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\uff0c\u5219\u9012\u5f52\u904d\u5386\u3002 import java.io.*; import java.util.*; class Graph { private int v; private LinkedList<Integer> adj[]; Graph(int v){ V = v; adj = new LinkedList[v]; for(int i = 0; i < v; i++){ adj[i] = new LinkedList<>(); } } void addEdge(int v, int w){ adj[v].add(w); } void DFSUtil(int v, boolean visited[]){ visited[v] = true; System.out.println(v + \" \"); Iterator<Integer> i = adj[v].listIterator(); while(i.hasNext()){ int n = i.next(); if(!visited[n]){ DFSUtil(n, visited); } } } void DFS(int v){ boolean visited[] = new boolean[V]; DFSUtil(v, visited); } public static void main(String args[]){ Graph g = new Graph(4); g.addEdge(0, 1); g.addEdge(0, 2); g.addEdge(1, 2); g.addEdge(2, 0); g.addEdge(2, 3); g.addEdge(3, 3); System.out.println( \"Following is Depth First Traversal \" + \"(starting from vertex 2)\"); g.DFS(2); // Following is Depth First Traversal (starting from vertex 2) // 2 0 1 3 } }","title":"DFS\u7b97\u6cd5"},{"location":"graph/#dfs_1","text":"\u68c0\u6d4b\u56fe\u4e2d\u7684\u73af \u5bfb\u627e\u8def\u5f84 \u62d3\u6251\u6392\u5e8f \u68c0\u6d4b\u56fe\u662f\u4e0d\u662f\u4e00\u4e2a\u4e8c\u5206\u56fe\uff08\u8fde\u901a\u6027\uff09 \u627e\u5230\u56fe\u7684\u5f3a\u8fde\u901a\u5206\u91cf \u8ff7\u5bab\u7c7b\u9898\u76ee","title":"DFS\u5e94\u7528"},{"location":"graph/#bfs_1","text":"\u975e\u52a0\u6743\u56fe\u7684\u6700\u77ed\u8def\u5f84\u4e0e\u6700\u5c0f\u751f\u6210\u6811 \u5bf9\u7b49\u7f51\u7edc \u641c\u7d22\u5f15\u64ce\u4e2d\u7684\u722c\u866b \u793e\u4ea4\u7f51\u7ad9 GPS\u5bfc\u822a\u7cfb\u7edf \u7f51\u7edc\u4e2d\u7684\u5e7f\u64ad \u5783\u573e\u56de\u6536 \u68c0\u6d4b\u65e0\u5411\u56fe\u4e2d\u7684\u73af Ford-Fulkerson\u7b97\u6cd5\uff08\u6700\u5927\u6d41\u91cf\u7b97\u6cd5\uff09 \u68c0\u6d4b\u56fe\u662f\u4e0d\u662f\u4e00\u4e2a\u4e8c\u5206\u56fe \u5bfb\u627e\u8def\u5f84 \u5bfb\u627e\u4e00\u4e2a\u8282\u70b9\u8fde\u901a\u7684\u6240\u6709\u8282\u70b9","title":"BFS\u5e94\u7528"},{"location":"graph/#sethash","text":"\u6bcf\u4e2a\u70b9\u8fde\u63a5\u7684\u8282\u70b9\u90fd\u7528\u4e00\u4e2aset\u6765\u8fdb\u884c\u4fdd\u5b58\uff0c\u5e76\u4e14\u662f\u4ece\u5c0f\u5230\u8fbe\u6392\u5217\u7684\u3002 import java.util.*; class Graph{ HashMap<Integer, TreeSet<Integer>> graph; static int v; public Graph(){ graph = new HashMap<>(); for(int i = 0; i < v; i++){ graph.put(i, new TreeSet<>()); } } public void addEdge(int src, int dest){ graph.get(src).add(dest); graph.get(dest).add(src); } public void printGraph(){ for(int i = 0 ; i < v; i++){ System.out.println(\"Adjacency list of vertex \"+ i); Iterator set = graph.get(i).iterator(); while(set.hasNext()){ System.out.println(set.next() + \" \"); } System.out.println(\"\\n\"); } } public void searchEdge(int src, int dest){ Iterator set = graph.get(src).iterator(); if (graph.get(src).contains(dest)) System.out.println(\"Edge from \" + src + \" to \" + dest + \" found\"); else System.out.println(\"Edge from \" + src + \" to \" + dest + \" not found\"); System.out.println(); } public static void main(String[] args){ v = 5; Graph graph = new Graph(); graph.addEdge(0, 1); graph.addEdge(0, 4); graph.addEdge(1, 2); graph.addEdge(1, 3); graph.addEdge(1, 4); graph.addEdge(2, 3); graph.addEdge(3, 4); graph.printGraph(); graph.searchEdge(2,1); graph.searchEdge(0,3); } //Adjacency list of vertex 0 //4 1 //Adjacency list of vertex 1 //4 3 2 0 //Adjacency list of vertex 2 //3 1 //Adjacency list of vertex 3 //4 2 1 //Adjacency list of vertex 4 //3 1 0 //Edge from 2 to 1 found. //Edge from 0 to 3 not found. }","title":"\u7528set\u548chash\u6765\u8868\u793a\u56fe"},{"location":"weekly/309/","text":"\u7b80\u5355\u8bb0\u5f55\u4e0b\u7b2c309\u573a\u5468\u8d5b\uff0c\u8fd9\u6b21\u5468\u8d5b\u5fc3\u6001\u5d29\u4e86\uff0c\u53ea\u505a\u51fa\u6765\u7b2c\u4e00\u9898\uff0c\u7b2c\u4e8c\u9898\u76f4\u63a5\u5361\u4f4f\uff0c\u6240\u4ee5\u5c31\u6ca1\u4e0b\u505a\u4e86\uff0c\u867d\u7136\u77e5\u9053\u7b2c\u4e09\u9898\u662f\u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u8fdb\u884c\u89e3\u9898\uff0c\u4f46\u662f\u601d\u60f3\u4e0a\u5df2\u7ecf\u653e\u5f03\u4e86\uff0c\u5367\u69fd\u3002 2399 \u68c0\u67e5\u76f8\u540c\u5b57\u6bcd\u95f4\u7684\u8ddd\u79bb \u8fd9\u4e2a\u9898\u76ee\u6bd4\u8f83\u7b80\u5355,\u4e3b\u8981\u662f\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u6765\u8bb0\u5f55\u4e0a\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u904d\u5386\u5230\u7b2c\u4e8c\u4e2a\u51fa\u73b0\u7684\u5730\u65b9\u4e4b\u540e\uff0c\u770b\u4e0b\u4e24\u6b21\u51fa\u73b0\u4f4d\u7f6e\u4e4b\u95f4\u7684\u8ddd\u79bb\u662f\u5426\u7b49\u4e8edistance\u6570\u7ec4\u76f8\u5e94\u7d22\u5f15\u5904\u7684\u503c\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a class Solution { public boolean checkDistances(String s, int[] distance) { // \u5b58\u653e26\u4e2a\u5b57\u6bcd\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e int[] cnt = new int[26]; for(int i = 0; i < 26; i++){ cnt[i] = -1; } char[] arr = s.toCharArray(); for(int i = 0; i < arr.length; i++){ char c = arr[i]; // \u7b2c\u4e00\u6b21\u51fa\u73b0\u8bb0\u5f55\u4e0b\u4f4d\u7f6e if(cnt[c-'a']==-1){ cnt[c-'a'] = i; }else{ // \u8ba1\u7b97\u548c\u7b2c\u4e00\u6b21\u51fa\u73b0\u4f4d\u7f6e\u7684\u8ddd\u79bb int dis = i - cnt[c-'a'] - 1; if(dis != distance[c-'a']){ // \u5982\u679c\u4e0d\u60f3\u7b49\u76f4\u63a5\u8fd4\u56defalse return false; } } } return true; } } 2400 \u6070\u597d\u79fb\u52a8k\u6b65\u5230\u8fbe\u67d0\u4e00\u4f4d\u7f6e\u7684\u65b9\u6cd5\u6570\u76ee \u8fd9\u9053\u9898\u76ee\u6211\u4f7f\u7528\u66b4\u529bdfs\u771f\u7684\u6c99\u96d5\uff0c\u5bf9\u4e8e\u5c0f\u6570\u636e\u8fd8\u80fd\u8fc7\uff0c\u4f46\u662f\u4e00\u9053\u90a3\u79cd\u5947\u602a\u7684\u7528\u4f8b\u5c31\u76f4\u63a5\u8d85\u65f6\uff0c\u5f53\u65f6\u505a\u7684\u65f6\u5019\u867d\u7136\u77e5\u9053\u8fd9\u6837\u4e0d\u662f\u4e00\u4e2a\u597d\u529e\u6cd5\uff0c\u4f46\u5c31\u662f\u60f3\u4e0d\u51fa\u6765\u6709\u5565\u597d\u529e\u6cd5\uff0c\u5bfc\u81f4\u5fc3\u6001\u5d29\u6e83\u3002 \u8fd9\u91cc\u597d\u597d\u8d34\u4e0bTsReaper\u5927\u4f6c\u7684\u89e3\u6cd5\uff1a \u6570\u5b66\uff1a \u79f0startPos\u6307\u5411endPos\u7684\u65b9\u5411\u4e3a\u6b63\u65b9\u5411\uff0cstartPos\u8fdc\u79bbendPos\u7684\u65b9\u5411\u4e3a\u8d1f\u65b9\u5411\u3002\u8bbe\u4ecestartPos\u51fa\u53d1\uff0c\u5f80\u6b63\u65b9\u5411\u8d70\u4e86a\u6b65\uff0c\u5f80\u8d1f\u65b9\u5411\u8d70\u4e86\uff08k-a\uff09\u6b65\u540e\u5230\u8fbeendPos\uff0c\u6839\u636e\u7ec4\u5408\u4e66\u7684\u5b9a\u4e49\u53ef\u77e5\u7b54\u6848\u4e3aC(k,a)(k\u6b65\u91cc\u9762\u9009a\u6b65\u8d70\u6b63\u65b9\u5411)\u3002 \u8bb0d = abs(endPos - startPos) , \u6709\u65b9\u7a0b a - (k - a) = d, \u5f97\u5230a = (d+k) / 2\u3002\u56e0\u6b64\u9996\u5148\u5224\u65ad\u662f\u5426\uff08d+k\uff09\u662f\u5426\u4e3a\u5076\u6570\uff08\u8fd9\u6837\u624d\u80fd\u6c42\u51fa\u6574\u6570a),\u4ee5\u53cad <= k(\u5426\u5219\u8d70\u4e0d\u5230)\uff0c\u7136\u540e\u6c42\u7ec4\u5408\u6570\u5373\u53ef\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a class Solution{ const int MOD = 1000000007; public: int numberOfWays(int startPos, int endPos, int k){ int d = abs(startPos - endPos); if((d+k) % 2 == 1 || d > k){ return 0; } vector<vector<long long>> f; f.resize(k+1, vector<long long>(k+1)); for(int i = 0; i <= k ; i++){ f[i][0] = 1; for(int j = 1; j <= i; j++){ f[i][j] = (f[i-1][j] + f[i-1][j-1]) % MOD; } } return f[k][(d+k)/ 2]; } }; \u6700\u957f\u4f18\u96c5\u5b50\u6570\u7ec4 \u8fd9\u9053\u9898\u76ee\u5176\u5b9e\u662f\u4e00\u9053\u5f88\u7ecf\u5178\u7684\u6ed1\u52a8\u7a97\u53e3\u7684\u9898\u76ee\uff0c\u9898\u76ee\u7684\u610f\u601d\u662f\u9700\u8981\u6211\u4eec\u627e\u5230\u4e00\u4e2a\u8fde\u7eed\u7684\u5b50\u6570\u7ec4\uff0c\u8fd9\u4e9b\u5b50\u6570\u7ec4\u6bcf\u4e2a\u6570\u8f6c\u5316\u6210\u4e8c\u8fdb\u5236\u65f6\u5404\u4e2a\u4f4d\u4e0a\u76841\u90fd\u4e0d\u4f1a\u91cd\u590d\uff0c\u6240\u4ee5\u6211\u4eec\u7528\u4e00\u4e2a\u6ed1\u52a8\u7a97\u53e3\u6765\u7ef4\u62a4\uff0c\u5982\u679c\u53f3\u79fb\u4e00\u4e2a\u5143\u7d20\u5bfc\u81f4\u54ea\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u51fa\u73b0\u7b2c\u4e8c\u6b211\uff0c\u90a3\u4e48\u5de6\u8fb9\u7684\u6307\u9488\u5c31\u8981\u4e0d\u505c\u5730\u79fb\u52a8\uff0c\u76f4\u81f3\u4e0d\u51fa\u73b0\u91cd\u590d\u7684\u60c5\u51b5\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a class Solution { // \u66b4\u529b\u7adf\u7136\u80fd\u8fc7\uff01 public int longestNiceSubarray(int[] nums) { int ret = 1; for(int i = 0; i < nums.length; i++){ for(int j = i + 1; j < nums.length; j++){ if(elegant(nums, i, j)){ ret = Math.max(ret, j - i + 1); }else{ break; } } } return ret; } // \u5224\u65adstartIndex\u5230endIndex\u662f\u4e0d\u662f\u4e00\u4e2a\u4f18\u96c5\u6570\u7ec4 private boolean elegant(int[] nums, int startIndex, int endIndex){ for(int i = startIndex; i < endIndex; i++){ if((nums[endIndex] & nums[i]) != 0){ return false; } } return true; } } 2402 \u4f1a\u8bae\u5ba4III \u6284\u4e0b\u5927\u4f6c\u7684\u601d\u8def\uff1a\u6a21\u62df=\u6700\u5c0f\u5806+\u6700\u5c0f\u5806 class Node{ long endTime; int roomID; Node(){} Node(long endTime, int roomID){ this.endTime = endTime; this.roomID = rootID; } } class Solution{ public int mostBooked(int n , int[][] meetings){ int[] room_cnt = new int[n]; Arrays.sort(meetings, (a,b)->{ if(a[0] != b[0]){ return a[0] - b[0]; } return a[1] - b[1]; }); PriorityQueue<Integer> min_room = new PriorityQueue<>(new Comparator<>(){ public int compare(Integer a, Integer b) { return a - b; } }); PriorityQueue<Node> min_meet = new PriorityQueue<>(new Comparator<>(){ public int compare(Node a, Node b) { if (a.endTime != b.endTime){ return (int)(a.endTime - b.endTime); } return a.roomID - b.roomID; } }); for (int ID = 0; ID < n; ID ++) { min_room.offer(ID); } for (int [] me: meetings) { int s = me[0], e = me[1]; //---- \u5df2\u7ecf\u5f00\u5b8c\u4f1a\u7684\u4f1a\u8bae\u5ba4\uff0c\u7a7a\u95f2\u51fa\u6765 while (!min_meet.isEmpty() && min_meet.peek().endTime <= s) { Node tmp = min_meet.poll(); long endTime = tmp.endTime; int roomID = tmp.roomID; min_room.offer(roomID); } //---- \u5982\u679c\u6709\u7a7a\u95f2\u7684\u4f1a\u8bae\u5ba4 if (!min_room.isEmpty()) { int roomID = min_room.poll(); room_cnt[roomID] ++; min_meet.offer(new Node(e, roomID)); } //---- \u5982\u679c\u6ca1\u6709\u4f1a\u8bae\u5ba4 else { Node tmp = min_meet.poll(); long endTime = tmp.endTime; int roomID = tmp.roomID; room_cnt[roomID] ++; min_meet.offer(new Node(endTime + e - s, roomID)); } } int max_val = 0; int max_i = 0; for (int i = 0; i < n; i ++) { if (room_cnt[i] > max_val) { max_val = room_cnt[i]; max_i = i; } } return max_i; } }","title":"Weekly 309"},{"location":"weekly/309/#2399","text":"\u8fd9\u4e2a\u9898\u76ee\u6bd4\u8f83\u7b80\u5355,\u4e3b\u8981\u662f\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u6765\u8bb0\u5f55\u4e0a\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u904d\u5386\u5230\u7b2c\u4e8c\u4e2a\u51fa\u73b0\u7684\u5730\u65b9\u4e4b\u540e\uff0c\u770b\u4e0b\u4e24\u6b21\u51fa\u73b0\u4f4d\u7f6e\u4e4b\u95f4\u7684\u8ddd\u79bb\u662f\u5426\u7b49\u4e8edistance\u6570\u7ec4\u76f8\u5e94\u7d22\u5f15\u5904\u7684\u503c\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a class Solution { public boolean checkDistances(String s, int[] distance) { // \u5b58\u653e26\u4e2a\u5b57\u6bcd\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e int[] cnt = new int[26]; for(int i = 0; i < 26; i++){ cnt[i] = -1; } char[] arr = s.toCharArray(); for(int i = 0; i < arr.length; i++){ char c = arr[i]; // \u7b2c\u4e00\u6b21\u51fa\u73b0\u8bb0\u5f55\u4e0b\u4f4d\u7f6e if(cnt[c-'a']==-1){ cnt[c-'a'] = i; }else{ // \u8ba1\u7b97\u548c\u7b2c\u4e00\u6b21\u51fa\u73b0\u4f4d\u7f6e\u7684\u8ddd\u79bb int dis = i - cnt[c-'a'] - 1; if(dis != distance[c-'a']){ // \u5982\u679c\u4e0d\u60f3\u7b49\u76f4\u63a5\u8fd4\u56defalse return false; } } } return true; } }","title":"2399 \u68c0\u67e5\u76f8\u540c\u5b57\u6bcd\u95f4\u7684\u8ddd\u79bb"},{"location":"weekly/309/#2400-k","text":"\u8fd9\u9053\u9898\u76ee\u6211\u4f7f\u7528\u66b4\u529bdfs\u771f\u7684\u6c99\u96d5\uff0c\u5bf9\u4e8e\u5c0f\u6570\u636e\u8fd8\u80fd\u8fc7\uff0c\u4f46\u662f\u4e00\u9053\u90a3\u79cd\u5947\u602a\u7684\u7528\u4f8b\u5c31\u76f4\u63a5\u8d85\u65f6\uff0c\u5f53\u65f6\u505a\u7684\u65f6\u5019\u867d\u7136\u77e5\u9053\u8fd9\u6837\u4e0d\u662f\u4e00\u4e2a\u597d\u529e\u6cd5\uff0c\u4f46\u5c31\u662f\u60f3\u4e0d\u51fa\u6765\u6709\u5565\u597d\u529e\u6cd5\uff0c\u5bfc\u81f4\u5fc3\u6001\u5d29\u6e83\u3002 \u8fd9\u91cc\u597d\u597d\u8d34\u4e0bTsReaper\u5927\u4f6c\u7684\u89e3\u6cd5\uff1a \u6570\u5b66\uff1a \u79f0startPos\u6307\u5411endPos\u7684\u65b9\u5411\u4e3a\u6b63\u65b9\u5411\uff0cstartPos\u8fdc\u79bbendPos\u7684\u65b9\u5411\u4e3a\u8d1f\u65b9\u5411\u3002\u8bbe\u4ecestartPos\u51fa\u53d1\uff0c\u5f80\u6b63\u65b9\u5411\u8d70\u4e86a\u6b65\uff0c\u5f80\u8d1f\u65b9\u5411\u8d70\u4e86\uff08k-a\uff09\u6b65\u540e\u5230\u8fbeendPos\uff0c\u6839\u636e\u7ec4\u5408\u4e66\u7684\u5b9a\u4e49\u53ef\u77e5\u7b54\u6848\u4e3aC(k,a)(k\u6b65\u91cc\u9762\u9009a\u6b65\u8d70\u6b63\u65b9\u5411)\u3002 \u8bb0d = abs(endPos - startPos) , \u6709\u65b9\u7a0b a - (k - a) = d, \u5f97\u5230a = (d+k) / 2\u3002\u56e0\u6b64\u9996\u5148\u5224\u65ad\u662f\u5426\uff08d+k\uff09\u662f\u5426\u4e3a\u5076\u6570\uff08\u8fd9\u6837\u624d\u80fd\u6c42\u51fa\u6574\u6570a),\u4ee5\u53cad <= k(\u5426\u5219\u8d70\u4e0d\u5230)\uff0c\u7136\u540e\u6c42\u7ec4\u5408\u6570\u5373\u53ef\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a class Solution{ const int MOD = 1000000007; public: int numberOfWays(int startPos, int endPos, int k){ int d = abs(startPos - endPos); if((d+k) % 2 == 1 || d > k){ return 0; } vector<vector<long long>> f; f.resize(k+1, vector<long long>(k+1)); for(int i = 0; i <= k ; i++){ f[i][0] = 1; for(int j = 1; j <= i; j++){ f[i][j] = (f[i-1][j] + f[i-1][j-1]) % MOD; } } return f[k][(d+k)/ 2]; } };","title":"2400 \u6070\u597d\u79fb\u52a8k\u6b65\u5230\u8fbe\u67d0\u4e00\u4f4d\u7f6e\u7684\u65b9\u6cd5\u6570\u76ee"},{"location":"weekly/309/#_1","text":"\u8fd9\u9053\u9898\u76ee\u5176\u5b9e\u662f\u4e00\u9053\u5f88\u7ecf\u5178\u7684\u6ed1\u52a8\u7a97\u53e3\u7684\u9898\u76ee\uff0c\u9898\u76ee\u7684\u610f\u601d\u662f\u9700\u8981\u6211\u4eec\u627e\u5230\u4e00\u4e2a\u8fde\u7eed\u7684\u5b50\u6570\u7ec4\uff0c\u8fd9\u4e9b\u5b50\u6570\u7ec4\u6bcf\u4e2a\u6570\u8f6c\u5316\u6210\u4e8c\u8fdb\u5236\u65f6\u5404\u4e2a\u4f4d\u4e0a\u76841\u90fd\u4e0d\u4f1a\u91cd\u590d\uff0c\u6240\u4ee5\u6211\u4eec\u7528\u4e00\u4e2a\u6ed1\u52a8\u7a97\u53e3\u6765\u7ef4\u62a4\uff0c\u5982\u679c\u53f3\u79fb\u4e00\u4e2a\u5143\u7d20\u5bfc\u81f4\u54ea\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u51fa\u73b0\u7b2c\u4e8c\u6b211\uff0c\u90a3\u4e48\u5de6\u8fb9\u7684\u6307\u9488\u5c31\u8981\u4e0d\u505c\u5730\u79fb\u52a8\uff0c\u76f4\u81f3\u4e0d\u51fa\u73b0\u91cd\u590d\u7684\u60c5\u51b5\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a class Solution { // \u66b4\u529b\u7adf\u7136\u80fd\u8fc7\uff01 public int longestNiceSubarray(int[] nums) { int ret = 1; for(int i = 0; i < nums.length; i++){ for(int j = i + 1; j < nums.length; j++){ if(elegant(nums, i, j)){ ret = Math.max(ret, j - i + 1); }else{ break; } } } return ret; } // \u5224\u65adstartIndex\u5230endIndex\u662f\u4e0d\u662f\u4e00\u4e2a\u4f18\u96c5\u6570\u7ec4 private boolean elegant(int[] nums, int startIndex, int endIndex){ for(int i = startIndex; i < endIndex; i++){ if((nums[endIndex] & nums[i]) != 0){ return false; } } return true; } }","title":"\u6700\u957f\u4f18\u96c5\u5b50\u6570\u7ec4"},{"location":"weekly/309/#2402-iii","text":"\u6284\u4e0b\u5927\u4f6c\u7684\u601d\u8def\uff1a\u6a21\u62df=\u6700\u5c0f\u5806+\u6700\u5c0f\u5806 class Node{ long endTime; int roomID; Node(){} Node(long endTime, int roomID){ this.endTime = endTime; this.roomID = rootID; } } class Solution{ public int mostBooked(int n , int[][] meetings){ int[] room_cnt = new int[n]; Arrays.sort(meetings, (a,b)->{ if(a[0] != b[0]){ return a[0] - b[0]; } return a[1] - b[1]; }); PriorityQueue<Integer> min_room = new PriorityQueue<>(new Comparator<>(){ public int compare(Integer a, Integer b) { return a - b; } }); PriorityQueue<Node> min_meet = new PriorityQueue<>(new Comparator<>(){ public int compare(Node a, Node b) { if (a.endTime != b.endTime){ return (int)(a.endTime - b.endTime); } return a.roomID - b.roomID; } }); for (int ID = 0; ID < n; ID ++) { min_room.offer(ID); } for (int [] me: meetings) { int s = me[0], e = me[1]; //---- \u5df2\u7ecf\u5f00\u5b8c\u4f1a\u7684\u4f1a\u8bae\u5ba4\uff0c\u7a7a\u95f2\u51fa\u6765 while (!min_meet.isEmpty() && min_meet.peek().endTime <= s) { Node tmp = min_meet.poll(); long endTime = tmp.endTime; int roomID = tmp.roomID; min_room.offer(roomID); } //---- \u5982\u679c\u6709\u7a7a\u95f2\u7684\u4f1a\u8bae\u5ba4 if (!min_room.isEmpty()) { int roomID = min_room.poll(); room_cnt[roomID] ++; min_meet.offer(new Node(e, roomID)); } //---- \u5982\u679c\u6ca1\u6709\u4f1a\u8bae\u5ba4 else { Node tmp = min_meet.poll(); long endTime = tmp.endTime; int roomID = tmp.roomID; room_cnt[roomID] ++; min_meet.offer(new Node(endTime + e - s, roomID)); } } int max_val = 0; int max_i = 0; for (int i = 0; i < n; i ++) { if (room_cnt[i] > max_val) { max_val = room_cnt[i]; max_i = i; } } return max_i; } }","title":"2402 \u4f1a\u8bae\u5ba4III"}]}