{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6b22\u8fce\u8e29\u8e29\uff01 For full documentation visit mkdocs.org . Mkdocs\u5e38\u7528\u547d\u4ee4\u5982\u4e0b\uff1a mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"\u9996\u9875"},{"location":"#_1","text":"For full documentation visit mkdocs.org .","title":"\u6b22\u8fce\u8e29\u8e29\uff01"},{"location":"#mkdocs","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Mkdocs\u5e38\u7528\u547d\u4ee4\u5982\u4e0b\uff1a"},{"location":"about/","text":"\u6211\u53ea\u662f\u4e00\u4e2a\u5c0f\u83dc\u9e21\u3002 \u4f46\u8981\u8bb0\u5f97\u6211\u7684\u540d\u5b57\u662f\u83dc\u725b\u51b2\u9e2d\uff01","title":"\u5173\u4e8e\u6211"},{"location":"about/#_1","text":"","title":"\u6211\u53ea\u662f\u4e00\u4e2a\u5c0f\u83dc\u9e21\u3002"},{"location":"about/#_2","text":"","title":"\u4f46\u8981\u8bb0\u5f97\u6211\u7684\u540d\u5b57\u662f\u83dc\u725b\u51b2\u9e2d\uff01"},{"location":"graph/","text":"\u90bb\u63a5\u77e9\u9635 import java.util.*; class Graph{ static void addEdge(ArrayList<ArrayList<Integer>> adj, int u, int v){ adj.get(u).add(v); adj.get(v).add(u); } /** * \u4ece\u6bcf\u4e2a\u8282\u70b9\u5f00\u59cb\uff0c\u6253\u5370\u8be5\u8282\u70b9\u76f8\u90bb\u7684\u70b9 */ static void printGraph(ArrayList<ArrayList<Integer>> adj){ for (int i = 0; i < adj.size(); i++) { System.out.println(\"\\nAdjacency list of vertex\" + i); System.out.print(\"head\"); for (int j = 0; j < adj.get(i).size(); j++) { System.out.print(\" -> \" + adj.get(i).get(j)); } System.out.println(); } } public static void main(String[] args) { int V = 5; ArrayList<ArrayList<Integer> > adj = new ArrayList<ArrayList<Integer> >(V); for (int i = 0; i < V; i++) adj.add(new ArrayList<Integer>()); addEdge(adj, 0, 1); addEdge(adj, 0, 4); addEdge(adj, 1, 2); addEdge(adj, 1, 3); addEdge(adj, 1, 4); addEdge(adj, 2, 3); addEdge(adj, 3, 4); printGraph(adj); } } BFS\u7b97\u6cd5 \u9700\u8981\u501f\u52a9\u4e00\u4e2avisited\u6570\u7ec4\u6765\u4fdd\u8bc1\u9047\u5230\u73af\u7684\u65f6\u5019\u4e0d\u4f1a\u65e0\u9650\u904d\u5386\u4e0b\u53bb\u3002 import java.io.*; import java.util.*; class Graph{ private int V; private LinkedList<Integer> adj[]; Graph(int v){ V = v; adj = new LinkedList[v]; for(int i = 0; i < v; i++){ adj[i] = new LinkedList<>(); } } /* * * \u4e00\u6761\u8fb9 \u4ecev\u5230w */ void addEdge(int v, int w){ adj[v].add(w); } // \u4ece\u70b9s\u5f00\u59cb\u904d\u5386\u6574\u4e2a\u56fe vpid BFS(int s){ boolean visited[] = new boolean[V]; LinkedList<Integer> queue = new LinkedList<Integer>(); visited[s] = true; queue.add(s); while(!queue.isEmpty()){ s = queue.poll(); System.out.println(s + \" \"); Iterator<Integer> i = adj[s].listIterator(); while(i.hasNext()){ int n = i.next(); if(!visited[n]){ visited[n] = true; queue.add(n); } } } } public static void main(String args[]){ Grapg g = new Graph(4); g.addEdge(0,1); g.addEdge(0,2); g.addEdge(1,2); g.addEdge(2,0); g.addEdge(2,3); g.addEdge(3,3); System.out.println(\"Following is Breadth First Traversal \"+ \"(starting from vertex 2)\"); g.BFS(2); } // Following is Breadth First Traversal (starting from vertex 2) // 2 0 3 1 } DFS\u7b97\u6cd5 \u4e3b\u8981\u7b97\u6cd5\uff1a 1. \u6807\u8bb0\u5f53\u524d\u8282\u70b9\u4e3a\u8bbf\u95ee\u8fc7\u540e\u6253\u5370\u5f53\u524d\u8282\u70b9 2. \u904d\u5386\u6240\u6709\u7684\u90bb\u63a5\u8282\u70b9\uff0c\u5982\u679c\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\uff0c\u5219\u9012\u5f52\u904d\u5386\u3002 import java.io.*; import java.util.*; class Graph { private int v; private LinkedList<Integer> adj[]; Graph(int v){ V = v; adj = new LinkedList[v]; for(int i = 0; i < v; i++){ adj[i] = new LinkedList<>(); } } void addEdge(int v, int w){ adj[v].add(w); } void DFSUtil(int v, boolean visited[]){ visited[v] = true; System.out.println(v + \" \"); Iterator<Integer> i = adj[v].listIterator(); while(i.hasNext()){ int n = i.next(); if(!visited[n]){ DFSUtil(n, visited); } } } void DFS(int v){ boolean visited[] = new boolean[V]; DFSUtil(v, visited); } public static void main(String args[]){ Graph g = new Graph(4); g.addEdge(0, 1); g.addEdge(0, 2); g.addEdge(1, 2); g.addEdge(2, 0); g.addEdge(2, 3); g.addEdge(3, 3); System.out.println( \"Following is Depth First Traversal \" + \"(starting from vertex 2)\"); g.DFS(2); // Following is Depth First Traversal (starting from vertex 2) // 2 0 1 3 } }","title":"\u56fe\u8bba"},{"location":"graph/#_1","text":"import java.util.*; class Graph{ static void addEdge(ArrayList<ArrayList<Integer>> adj, int u, int v){ adj.get(u).add(v); adj.get(v).add(u); } /** * \u4ece\u6bcf\u4e2a\u8282\u70b9\u5f00\u59cb\uff0c\u6253\u5370\u8be5\u8282\u70b9\u76f8\u90bb\u7684\u70b9 */ static void printGraph(ArrayList<ArrayList<Integer>> adj){ for (int i = 0; i < adj.size(); i++) { System.out.println(\"\\nAdjacency list of vertex\" + i); System.out.print(\"head\"); for (int j = 0; j < adj.get(i).size(); j++) { System.out.print(\" -> \" + adj.get(i).get(j)); } System.out.println(); } } public static void main(String[] args) { int V = 5; ArrayList<ArrayList<Integer> > adj = new ArrayList<ArrayList<Integer> >(V); for (int i = 0; i < V; i++) adj.add(new ArrayList<Integer>()); addEdge(adj, 0, 1); addEdge(adj, 0, 4); addEdge(adj, 1, 2); addEdge(adj, 1, 3); addEdge(adj, 1, 4); addEdge(adj, 2, 3); addEdge(adj, 3, 4); printGraph(adj); } }","title":"\u90bb\u63a5\u77e9\u9635"},{"location":"graph/#bfs","text":"\u9700\u8981\u501f\u52a9\u4e00\u4e2avisited\u6570\u7ec4\u6765\u4fdd\u8bc1\u9047\u5230\u73af\u7684\u65f6\u5019\u4e0d\u4f1a\u65e0\u9650\u904d\u5386\u4e0b\u53bb\u3002 import java.io.*; import java.util.*; class Graph{ private int V; private LinkedList<Integer> adj[]; Graph(int v){ V = v; adj = new LinkedList[v]; for(int i = 0; i < v; i++){ adj[i] = new LinkedList<>(); } } /* * * \u4e00\u6761\u8fb9 \u4ecev\u5230w */ void addEdge(int v, int w){ adj[v].add(w); } // \u4ece\u70b9s\u5f00\u59cb\u904d\u5386\u6574\u4e2a\u56fe vpid BFS(int s){ boolean visited[] = new boolean[V]; LinkedList<Integer> queue = new LinkedList<Integer>(); visited[s] = true; queue.add(s); while(!queue.isEmpty()){ s = queue.poll(); System.out.println(s + \" \"); Iterator<Integer> i = adj[s].listIterator(); while(i.hasNext()){ int n = i.next(); if(!visited[n]){ visited[n] = true; queue.add(n); } } } } public static void main(String args[]){ Grapg g = new Graph(4); g.addEdge(0,1); g.addEdge(0,2); g.addEdge(1,2); g.addEdge(2,0); g.addEdge(2,3); g.addEdge(3,3); System.out.println(\"Following is Breadth First Traversal \"+ \"(starting from vertex 2)\"); g.BFS(2); } // Following is Breadth First Traversal (starting from vertex 2) // 2 0 3 1 }","title":"BFS\u7b97\u6cd5"},{"location":"graph/#dfs","text":"\u4e3b\u8981\u7b97\u6cd5\uff1a 1. \u6807\u8bb0\u5f53\u524d\u8282\u70b9\u4e3a\u8bbf\u95ee\u8fc7\u540e\u6253\u5370\u5f53\u524d\u8282\u70b9 2. \u904d\u5386\u6240\u6709\u7684\u90bb\u63a5\u8282\u70b9\uff0c\u5982\u679c\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\uff0c\u5219\u9012\u5f52\u904d\u5386\u3002 import java.io.*; import java.util.*; class Graph { private int v; private LinkedList<Integer> adj[]; Graph(int v){ V = v; adj = new LinkedList[v]; for(int i = 0; i < v; i++){ adj[i] = new LinkedList<>(); } } void addEdge(int v, int w){ adj[v].add(w); } void DFSUtil(int v, boolean visited[]){ visited[v] = true; System.out.println(v + \" \"); Iterator<Integer> i = adj[v].listIterator(); while(i.hasNext()){ int n = i.next(); if(!visited[n]){ DFSUtil(n, visited); } } } void DFS(int v){ boolean visited[] = new boolean[V]; DFSUtil(v, visited); } public static void main(String args[]){ Graph g = new Graph(4); g.addEdge(0, 1); g.addEdge(0, 2); g.addEdge(1, 2); g.addEdge(2, 0); g.addEdge(2, 3); g.addEdge(3, 3); System.out.println( \"Following is Depth First Traversal \" + \"(starting from vertex 2)\"); g.DFS(2); // Following is Depth First Traversal (starting from vertex 2) // 2 0 1 3 } }","title":"DFS\u7b97\u6cd5"}]}